package com.fkty.mobileiq.distribution.app.model.impl;

import android.content.Context;
import android.os.Bundle;
import android.os.Message;
import android.util.Log;

import com.fkty.mobileiq.distribution.app.model.IOpenTestModel;
import com.fkty.mobileiq.distribution.basic.BasicModel;
import com.fkty.mobileiq.distribution.bean.TestParamsBean;
import com.fkty.mobileiq.distribution.bean.TestTypeBean;
import com.fkty.mobileiq.distribution.constant.CommonField;
import com.fkty.mobileiq.distribution.constant.OpenTestConstant;
import com.fkty.mobileiq.distribution.constant.ServerErrorCode;
import com.fkty.mobileiq.distribution.core.CoreNotifier;
import com.fkty.mobileiq.distribution.core.ICoreListener;
import com.fkty.mobileiq.distribution.http.INetNotify;
import com.fkty.mobileiq.distribution.http.WebHttpUtils;
import com.fkty.mobileiq.distribution.inter.IBasicHandler;
import com.fkty.mobileiq.distribution.result.TestResult;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by frank_tracy on 2018/3/13.
 */

public class OpenTestModel extends BasicModel
        implements IOpenTestModel, OpenTestConstant, ICoreListener, INetNotify
{
    private static String TAG = OpenTestModel.class.getSimpleName();
    private List<TestTypeBean> data;
    private IBasicHandler.Callback testCallback;
    private List<TestParamsBean> testDataParams;

    public OpenTestModel()
    {
        CoreNotifier.getInstance().registerListener(this);
    }

    protected void handleMessage(Message paramMessage)
    {


    }

    public boolean onCoreMessage(String paramString)
    {
        Bundle localBundle = new Bundle();
        if (TestResult.getInstance().isNeedSave()){
            TestResult.getInstance().setResult(null);
        }
        //Log.e(TAG, "onCoreMessage:" + paramString);
        try{
            JSONObject localJSONObject1 = new JSONObject(paramString);
            if (localJSONObject1.optInt("errorCode") == ServerErrorCode.ERROR_CODE_SUCCESS){
                JSONArray localJSONArray = localJSONObject1.optJSONArray("modleResult"); //拼写错误，更换盒子后修改为modelResult
                if ((localJSONArray != null) && (localJSONArray.length() > 0))
                {
                    for(int i=0;i<localJSONArray.length();i++){
                        JSONObject localJSONObject2 = localJSONArray.optJSONObject(i);
                        if (localJSONObject2.optInt("modelType") == CommonField.MODLE_TYPE_OPEN_TEST){
                            localBundle.putString("message", localJSONObject2.toString());
                            this.testCallback.call(localJSONObject2.optInt("modleState"), localBundle);//拼写错误，更换盒子后修改为modelState
                            return false;
                        }
                    }
                }
            }else if (localJSONObject1.optInt("errorCode") == ServerErrorCode.ERROR_CODE_FAILED){
                this.testCallback.call(ServerErrorCode.ERROR_CODE_FAILED, null);
                return false;
            }
        }catch (JSONException e){
            e.printStackTrace();
        }
        return false;
    }

    public void onErrorNetClient(int paramInt, String paramString)
    {
        Log.e(TAG, "onErrorNetClient:" + paramString);
        Bundle localBundle = new Bundle();
        localBundle.putString("msg", paramString);
        switch (paramInt)
        {
            default:
                break;
            case TEST_START_MSG:
                this.testCallback.onFailed(TEST_START_FAILED, localBundle);
                break;
            case TEST_STOP_MSG:
                this.testCallback.onFailed(TEST_STOP_FAILED, localBundle);
                break;
        }

    }

    public void onFailedNetClient(int paramInt, String paramString)
    {
    }

    public void onSuccessNetClient(int paramInt, String paramString)
    {
        int i;
        Bundle localBundle;
        try
        {
            JSONObject localJSONObject1 = new JSONObject(paramString);
            //Log.e(TAG, "onSuccessNetClient:" + paramString);
            i = localJSONObject1.optInt("errorCode");
            localBundle = new Bundle();
            localBundle.putString("msg", paramString);
            switch (paramInt){
                default:
                    break;
                case TEST_START_MSG:
                    if (i == ServerErrorCode.ERROR_CODE_SUCCESS){
                        this.testCallback.onSuccess(TEST_START_SUCCESS, localBundle);
//                    }else if(i==ServerErrorCode.ERROR_CODE_INVALID_PARAMETER){
//
//                    }else if(i==ServerErrorCode.ERROR_CODE_NOT_READY){

                    }else if(i==ServerErrorCode.ERROR_CODE_ALREADY_TESTING){
                        WebHttpUtils.getInstance().stopTest(CommonField.MODLE_TYPE_OPEN_TEST, this, TEST_STOP_AND_START);
                    }else{
                        this.testCallback.onFailed(TEST_START_FAILED, localBundle);
                    }
                    break;
                case TEST_STOP_MSG:
                    if (i == ServerErrorCode.ERROR_CODE_SUCCESS){
                        this.testCallback.onSuccess(TEST_STOP_SUCCESS, localBundle);
                    }else{
                        this.testCallback.onFailed(TEST_STOP_FAILED, localBundle);
                    }
                    break;
                case TEST_STOP_AND_START:
                    if (i == ServerErrorCode.ERROR_CODE_SUCCESS){
                        WebHttpUtils.getInstance().startTest(this.testDataParams, CommonField.MODLE_TYPE_OPEN_TEST, this, TEST_START_MSG);
                    }else{
                        this.testCallback.onFailed(TEST_START_FAILED, localBundle);
                    }
                    break;
            }
        }
        catch (JSONException e){
            e.printStackTrace();
        }
    }

    public void setCallBack(IBasicHandler.Callback paramCallback)
    {
    }

    public void setCallback(IBasicHandler.Callback paramCallback)
    {
        this.testCallback = paramCallback;
    }

    public void startTest(Context paramContext, int testingIndex, List<TestParamsBean> paramList1, IBasicHandler.Callback paramCallback)
    {
        List<TestParamsBean>  temp= new ArrayList();
        temp.add(paramList1.get(testingIndex));
        this.testDataParams = temp;
        Log.d(TAG," WebHttpUtils.getInstance().startTest");
        WebHttpUtils.getInstance().startTest(this.testDataParams, CommonField.MODLE_TYPE_OPEN_TEST, this, TEST_START_MSG);

    }

    public void stopTest()
    {
        Log.d(TAG," WebHttpUtils.getInstance().stopTest");
        WebHttpUtils.getInstance().stopTest(CommonField.MODLE_TYPE_OPEN_TEST, this, TEST_STOP_MSG);
    }
}
